name: Deploy

on:
    push:
        branches: ["main"]

env:
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{github.repository}}
    CONTAINER_NAME: ${{ github.event.repository.name }} # only repository name

jobs:
    tag-version:
        name: Tag Version
        runs-on: ubuntu-latest
        permissions:
            contents: write
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0 # Need full history to get all tags

            - name: Get latest tag
              run: |
                  # Get the latest tag that matches v*, if there's no tag, start with v1
                  LATEST_TAG=$(git describe --tags --abbrev=0 || echo "v0" | head -n 1)
                  echo "Latest tag: $LATEST_TAG"
                  echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

            - name: Increment version
              run: |
                  # Remove 'v' prefix for version calculation
                  VERSION=${LATEST_TAG#v}

                  # Increment the version number
                  NEW_VERSION_NUM=$((VERSION + 1))

                  # Add 'v' prefix back
                  NEW_VERSION="v$NEW_VERSION_NUM"
                  echo "New version: $NEW_VERSION"
                  echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

            - name: Create and push new tag
              run: |
                  git config --local user.email "action@github.com"
                  git config --local user.name "GitHub Action"
                  echo "Creating new tag: $NEW_VERSION"
                  git tag -a $NEW_VERSION -m ""
                  git push origin $NEW_VERSION

    build-and-publish-docker-image:
        name: Build and Publish Docker Image
        runs-on: ubuntu-latest
        needs: ["tag-version"]
        permissions:
            contents: read
            packages: write
            attestations: write
            id-token: write
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  submodules: "recursive"
                  fetch-depth: 0 # Need full history to get all tags

            - name: Login to GitHub Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Get latest tag
              id: latest-tag
              run: |
                  LATEST_TAG=$(git describe --tags --abbrev=0 | head -n 1)
                  echo "Latest tag: $LATEST_TAG"
                  echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_OUTPUT

            # This step uses metadata-action to extract tags and labels that will be
            # applied to the specified image. The `id` "meta" allows the output of
            # this step to be referenced in a subsequent step. The `images` value
            # provides the base name for the tags and labels.
            # We add the following tags
            # - version tags: for v1 -> v1, v2 -> v2, ...
            # - latest tags: always main
            - name: Extract metadata (tags, labels) for Docker
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  tags: |
                      type=raw,value=${{ steps.latest-tag.outputs.LATEST_TAG }}
                      type=raw,value=main
                  flavor: |
                      latest=false

            - name: Build and push Docker image
              id: push
              uses: docker/build-push-action@v6
              with:
                  context: .
                  push: true
                  platforms: linux/amd64,linux/arm64
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}

            - name: Generate artifact attestation
              uses: actions/attest-build-provenance@v1
              with:
                  subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
                  subject-digest: ${{ steps.push.outputs.digest }}
                  push-to-registry: true

    # TODO: Uncomment when deployment strategy is discussed
    # deploy-mock-backend:
    #     runs-on: ubuntu-latest
    #     needs: build-and-publish-docker-image

    #     steps:
    #         - name: Set up SSH
    #           run: |
    #               mkdir -p ~/.ssh
    #               echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
    #               chmod 600 ~/.ssh/id_rsa
    #         - name: Convert image name to lowercase
    #           run: |
    #               echo "IMAGE_NAME_LOWER=${IMAGE_NAME,,}" >> $GITHUB_ENV
    #         - name: Pull and (re)start docker image
    #           run: |
    #               ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << EOF
    #                 echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    #                 docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:main

    #                 docker stop ${{env.CONTAINER_NAME}} &> /dev/null
    #                 docker rm ${{env.CONTAINER_NAME}} &> /dev/null

    #                 docker run -d --env-file mock-backend/.env --name ${{env.CONTAINER_NAME}} -p 3001:3001 -p 3000:3000 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:main
    #               EOF
