name: Deploy

on:
    push:
        branches: ["main"]
        tags: ["v*"]

env:
    REGISTRY: ghcr.io
    IMAGE_NAME: $(echo "${{github.repository}}" | awk '{print tolower($0)}') # lower case owner name and repository name
    CONTAINER_NAME: $(basename ${{ github.repository }}) # only repository name

jobs:
    build-and-publish-docker-image:
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write
            attestations: write
            id-token: write

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  submodules: "recursive"

            - name: Login to GitHub Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            # This step uses metadata-action to extract tags and labels that will be
            # applied to the specified image. The `id` "meta" allows the output of
            # this step to be referenced in a subsequent step. The `images` value
            # provides the base name for the tags and labels.
            - name: Extract metadata (tags, labels) for Docker
              id: meta
              uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

            - name: Build and push Docker image
              id: push
              uses: docker/build-push-action@v6
              with:
                  context: .
                  push: true
                  platforms: linux/amd64,linux/arm64
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}

            - name: Generate artifact attestation
              uses: actions/attest-build-provenance@v1
              with:
                  subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
                  subject-digest: ${{ steps.push.outputs.digest }}
                  push-to-registry: true

    deploy-mock-backend:
        runs-on: ubuntu-latest
        needs: build-and-publish-docker-image

        steps:
            - name: Set up SSH
              run: |
                  mkdir -p ~/.ssh
                  echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
                  chmod 600 ~/.ssh/id_rsa
            - name: Pull and run docker image
              run: |
                  ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << EOF
                    echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
                    
                    docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
                    if [ -n "$(docker container ls -qa name=^${{env.CONTAINER_NAME}}$)" ]; then
                      docker stop ${{env.CONTAINER_NAME}}
                      docker rm ${{env.CONTAINER_NAME}}
                    fi
                    
                    docker run -d --env-file mock-backend/.env --name ${{env.CONTAINER_NAME}} -p 3001:3001 -p 3000:3000 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
                  EOF
